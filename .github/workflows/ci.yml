name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "dvc[s3]" pytest

      - name: DVC diagnostics
        run: |
          dvc --version
          dvc remote list || true
          cat .dvc/config || true

      - name: Pull & run pipeline
        run: |
          set -euxo pipefail
          dvc pull -v
          dvc checkout -v
          dvc repro -v --force   # produces models/latest (and metrics.json if you added evaluate)

      - name: Run tests
        run: pytest -q

      - name: Upload trained model (models/latest)
        uses: actions/upload-artifact@v4
        with:
          name: model-latest
          path: models/latest/

      - name: Upload metrics.json
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: metrics
          path: metrics.json

      # Uncomment if you use the evaluate stage
      # - name: Upload metrics
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: metrics
      #     path: metrics.json

      # Optional: Docker build
      # - name: Build Docker image
      #   run: docker build -t sentiment-api:${{ github.sha }} .
